generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Amenities {
  amenity_id         Int                  @id @default(autoincrement())
  name               String               @db.VarChar(50)
  icon               String?              @db.VarChar(255)
  Property_Amenities Property_Amenities[]
}

model Bookings {
  booking_id      Int                     @id @default(autoincrement())
  property_id     Int?
  user_id         Int?
  check_in        DateTime                @db.Date
  check_out       DateTime                @db.Date
  guests          Int
  total_price     Decimal                 @db.Decimal(10, 2)
  status          Bookings_status         @default(pending)
  created_at      DateTime?               @default(now()) @db.Timestamp(0)
  payment_status  Bookings_payment_status @default(pending)
  Properties      Properties?             @relation(fields: [property_id], references: [property_id], onDelete: NoAction, onUpdate: NoAction, map: "Bookings_ibfk_1")
  User            User?                   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Bookings_ibfk_2")
  Cancellations   Cancellations[]
  PropertyReviews PropertyReviews[]

  @@index([property_id], map: "property_id")
  @@index([user_id], map: "user_id")
}

model Cancellations {
  cancellation_id   Int                  @id @default(autoincrement())
  booking_id        Int?
  user_id           Int?
  reason            String?              @db.Text
  cancellation_date DateTime?            @default(now()) @db.Timestamp(0)
  refund_amount     Decimal?             @db.Decimal(10, 2)
  status            Cancellations_status @default(pending)
  Bookings          Bookings?            @relation(fields: [booking_id], references: [booking_id], onDelete: NoAction, onUpdate: NoAction, map: "Cancellations_ibfk_1")
  User              User?                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Cancellations_ibfk_2")

  @@index([booking_id], map: "booking_id")
  @@index([user_id], map: "user_id")
}

model Favorites {
  user_id     Int
  property_id Int
  User        User       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Favorites_ibfk_1")
  Properties  Properties @relation(fields: [property_id], references: [property_id], onDelete: NoAction, onUpdate: NoAction, map: "Favorites_ibfk_2")

  @@id([user_id, property_id])
  @@index([property_id], map: "property_id")
}

model Locations {
  location_id Int          @id @default(autoincrement())
  country     String       @db.VarChar(50)
  province    String       @db.VarChar(50)
  city        String       @db.VarChar(50)
  address     String       @db.VarChar(255)
  Properties  Properties[]
}

model Personal_details {
  detail_id         Int     @id @default(autoincrement())
  user_id           Int?    @unique(map: "user_id")
  government_id     String? @db.VarChar(50)
  address           String? @db.Text
  emergency_contact String? @db.VarChar(100)
  User              User?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Personal_details_ibfk_1")
}

model Policies {
  policy_id         Int                 @id @default(autoincrement())
  name              String              @db.VarChar(50)
  description       String?             @db.Text
  valid_until       DateTime?           @db.Date
  Property_Policies Property_Policies[]
}

model Properties {
  property_id        Int                  @id @default(autoincrement())
  user_id            Int?
  location_id        Int?
  name               String               @db.VarChar(100)
  description        String?              @db.Text
  base_price         Decimal              @db.Decimal(10, 2)
  max_guests         Int
  type               Properties_type
  status             Properties_status    @default(pending)
  Bookings           Bookings[]
  Favorites          Favorites[]
  User               User?                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Properties_ibfk_1")
  Locations          Locations?           @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "Properties_ibfk_2")
  PropertyImages     PropertyImages[]
  PropertyReviews    PropertyReviews[]
  Property_Amenities Property_Amenities[]
  Property_Policies  Property_Policies[]

  @@index([location_id], map: "location_id")
  @@index([user_id], map: "user_id")
}

model PropertyImages {
  image_id    Int                       @id @default(autoincrement())
  property_id Int?
  image_url   String                    @db.VarChar(255)
  image_type  PropertyImages_image_type
  is_primary  Boolean?                  @default(false)
  caption     String?                   @db.VarChar(255)
  upload_date DateTime?                 @default(now()) @db.Timestamp(0)
  Properties  Properties?               @relation(fields: [property_id], references: [property_id], onDelete: NoAction, onUpdate: NoAction, map: "PropertyImages_ibfk_1")

  @@index([property_id], map: "property_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model PropertyReviews {
  review_id   Int         @id @default(autoincrement())
  property_id Int?
  user_id     Int?
  booking_id  Int?
  rating      Int         @db.TinyInt
  comment     String?     @db.Text
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  Properties  Properties? @relation(fields: [property_id], references: [property_id], onDelete: NoAction, onUpdate: NoAction, map: "PropertyReviews_ibfk_1")
  User        User?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "PropertyReviews_ibfk_2")
  Bookings    Bookings?   @relation(fields: [booking_id], references: [booking_id], onDelete: NoAction, onUpdate: NoAction, map: "PropertyReviews_ibfk_3")

  @@index([booking_id], map: "booking_id")
  @@index([property_id], map: "property_id")
  @@index([user_id], map: "user_id")
}

model Property_Amenities {
  property_id Int
  amenity_id  Int
  Properties  Properties @relation(fields: [property_id], references: [property_id], onDelete: NoAction, onUpdate: NoAction, map: "Property_Amenities_ibfk_1")
  Amenities   Amenities  @relation(fields: [amenity_id], references: [amenity_id], onDelete: NoAction, onUpdate: NoAction, map: "Property_Amenities_ibfk_2")

  @@id([property_id, amenity_id])
  @@index([amenity_id], map: "amenity_id")
}

model Property_Policies {
  property_id Int
  policy_id   Int
  Properties  Properties @relation(fields: [property_id], references: [property_id], onDelete: NoAction, onUpdate: NoAction, map: "Property_Policies_ibfk_1")
  Policies    Policies   @relation(fields: [policy_id], references: [policy_id], onDelete: NoAction, onUpdate: NoAction, map: "Property_Policies_ibfk_2")

  @@id([property_id, policy_id])
  @@index([policy_id], map: "policy_id")
}

model User {
  user_id          Int               @id @default(autoincrement())
  name             String            @db.VarChar(100)
  email            String            @unique(map: "email") @db.VarChar(100)
  password         String            @db.VarChar(255)
  phone            String?           @db.VarChar(20)
  birth_day        DateTime?         @db.Date
  gender           User_gender
  role             User_role         @default(guest)
  avatar           String?           @db.VarChar(255)
  Bookings         Bookings[]
  Cancellations    Cancellations[]
  Favorites        Favorites[]
  Personal_details Personal_details?
  Properties       Properties[]
  PropertyReviews  PropertyReviews[]
}

enum PropertyImages_image_type {
  living_room
  bedroom
  kitchen
  bathroom
  exterior
  view
  dining_area
  other
}

enum Cancellations_status {
  pending
  approved
  rejected
}

enum User_gender {
  male
  female
  other
}

enum User_role {
  guest
  host
  admin
}

enum Bookings_status {
  pending
  confirmed
  cancelled
}

enum Properties_type {
  apartment
  house
  villa
  condo
  other
}

enum Properties_status {
  active
  inactive
  pending
  maintenance
}

enum Bookings_payment_status {
  pending
  paid
  refunded
}
